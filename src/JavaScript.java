import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */


public class JavaScript { 
//  PROCESSOR ATRIBUTES
    private static AFD afd;
    private static Character c;    // Character that has been read
    private static boolean errorState = false;
    private static int line = 1;   // It must have at least 1 line
    private static List<String> keywords;
    private static List<String> symbolsTable;
    private static Token sigToken;
    private static String tokensStrings[] = {"$", "let", "int", "string", "boolean", "if", 
    "do", "while", "function", "return", "print", "input", "(", ")", "{","}",";",",",
    "=","+=","*","!","<","cadena de caracteres","constante entera","identicador (nombre de una variable o funciÃ³n)"};
    private static List<Object> tablaSimGlobal = new ArrayList<Object>();
    private static List<Object> tablaSimLocal = new ArrayList<Object>();
    private static Map<String,Integer> mapaTSG = new HashMap<String,Integer>();
    private static Map<String,Integer> mapaTSL = new HashMap<String,Integer>();
    private static List<Object> tablasLocal = new ArrayList<Object>();
    private static boolean zonaDeclaracion = false;
    private static int desplLocal = 0;
    private static int desplGlobal = 0;
    private static boolean tablaG = true;
    private static int contadorFunciones = 0;
    private static int funcionAct = 0;    
    

//  Types
    private static final String vacio = "vacio";
    private static final String ok = "tipo_ok";
    private static final String error = "tipo_error";
    private static final String fun = "fun";
    private static final String logico = "logico";
    private static final String ent = "ent";
    private static final String cad = "cad";

//  RD/WR FILE ATRIBUTES
    private static Reader reader;
    private static Writer writer;

//  CONSTANTS
    private static final int SUCCED = 0;
    private static final int FAILURE = 1;
    private static final int EOF = 65535;

    public static Token LexicAnalizer(){
    //  Lexic analizer atributes
        int actualState = 0;        // Always starts at initial state 0
        Character actionToDo = null;    // List of actions that have to be done
        Token token = null;         // Token to be returned
        boolean rdNext = true;
    //  Auxiliar atributes for token
        MTpair pair = null;         // Stores the corresponding pair 
        String cad = "";            // Stores a string token

        while(actualState < 7 && !errorState){
            if (actualState == 5){
				while(c != '\n' && c != EOF){
                    c = reader.read();
                }
				actualState = 0;
		   	}
            if(c == '\n'){
                line++;
            }
            if(c == EOF){
                return new Token(EOF,"");
            }

            pair = afd.getMTpair(actualState, c);
            if(pair != null){ 
                actualState = pair.getState();
                actionToDo = pair.getAction();
            }else{ // Error
                switch(actualState){
                    case 0:
                       GenError(1, c.toString());
                       break;
                    case 4:
                        GenError(4, "");
                        break;
                    case 6: 
                        GenError(1, c.toString());
                }
            //  Prepare the next character for the next call to lexic analizer
                c = reader.read();
                return null;
            }

            switch(actionToDo){
                case 'A': 
                    token = GenToken(12, " ", "parIzq");
                    break;
                case 'B':
                    token = GenToken(13, " ", "parDrch");
                    break;
                case 'C':
                    token = GenToken(14, " ", "llaveIzq");
                    break;
                case 'D':
                    token = GenToken(15, " ", "llaveDrch");
                    break;
                case 'E':
                    token = GenToken(16, " ", "puntoYcoma");
                    break;
                case 'F':
                    token = GenToken(17, " ", "coma");
                    break;
                case 'G':
                    token = GenToken(18, " ", "asign");
                    break;
                case 'H':
                    token = GenToken(19, " ", "asignSuma");
                    break;
                case 'I':
                    token = GenToken(20, " ", "mult");
                    break;
                case 'J':
                    token = GenToken(21, " ", "neg");
                    break;
                case 'K':
                    token = GenToken(22, " ", "menor");
                    break;
                case 'L': // Read next char
                    break;
                case 'M': // String
                    if(cad.length() > 64){
                        GenError(2, "" + cad.length());
                    }else{
                        token = GenToken(23, "\"" + cad + "\"", "cadena");
                    }
                    break;
                case 'N': // Integer
                    if(Integer.parseInt(cad) > 32767){
                        GenError(3, "");
                    }else{
                        token = GenToken(24, cad, "constante entera");
                    }
                    rdNext = false;
                    break;
                case 'O': // Identifiers
                    int index = searchKeyword(cad);
                    if(index != -1){ // it is a keyword
                        token = GenToken(index, " ", "palabra reservada " + cad);
                    }else{
                        boolean contenido = false;
                        if(zonaDeclaracion){
                            if(tablaG){
                                contenido = mapaTSG.containsKey(cad);  
                            }else{
                                contenido = mapaTSL.containsKey(cad);
                            }
                            if(contenido){ // si ya esta contenido
                                int pos;
                                if(tablaG){
                                    pos = mapaTSG.get(cad);
                                }else{
                                    pos = mapaTSL.get(cad);
                                }
                                token = GenToken(25, pos, "identificador " + cad);
                                GenError(5, cad);
                            }else{ // no esta contenido
                                List <Object> atributos = new ArrayList<Object>();
                                atributos.add(0, cad); // lexema
                                atributos.add(1, "");  // tipo
                                atributos.add(2, cad); // desplazamiento
                                atributos.add(3, "");  // num parametros
                                List <Object> tipoParam = new ArrayList<Object>();
                                atributos.add(4, tipoParam); // tipo de parametros 
                                atributos.add(5, cad); // Tipo devuelto
                                atributos.add(6, cad); // Etiqueta
                                int pos;
                                if(tablaG){
                                    pos = tablaSimGlobal.size();
                                    mapaTSG.put(cad, pos);
                                    tablaSimGlobal.add(atributos);
    
                                }else{
                                    pos = tablaSimLocal.size();
                                    mapaTSL.put(cad, pos);
                                    tablaSimLocal.add(atributos);
                                }
                                token = GenToken(25, pos, "identificador " + cad);
                            }
                        }else{
                            if(!mapaTSG.containsKey(cad) && !mapaTSL.containsKey(cad) ){
                                token = GenToken(25, 0, "identificador " + cad);
                                GenError(9, cad);
                            }else{
                                if(mapaTSG.containsKey(cad)){
                                    token = GenToken(25, mapaTSG.get(cad), "identificador " + cad);
                                }else{
                                    token = GenToken(25, mapaTSL.get(cad), "identificador " + cad);
                                }
                            }
                        }
                    }
                    rdNext = false;
                    break;
                case 'X': // Concatenation
                    cad = cad + c;
                    break;
                default:
                    GenError(actualState, "leido");
                    break;
            }
            if(rdNext){
                c = reader.read();
            }
        }
        return token;
    } 

    public static void SyntaticAnalizer(){
        sigToken = LexicAnalizer();
        P();
        if(sigToken != null && sigToken.getID() != 65535){
            GenError(8, null);
        }
    }

    // PROCEDIMIENTOS

    private static void equipara(int t){
        if(sigToken != null){
            if(sigToken.getID() == t){
                sigToken = LexicAnalizer();
                /*if(sigToken == null) { // Si me devuelve un error escribo y exit 1
                    try {
                        writer.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                   // System.exit(1);
                }*/
            }else{
                GenError(6, tokensStrings[t]);
            }
        }
    }

    private static String E(){
        writer.writeParse("1");
        String tipoR = R();
        String tipoE2 = E2();
        if(tipoR.equals(ent) && tipoE2.equals(logico)){
            return logico;
        }else{
            return tipoR;
        }    
    }

    private static String E2(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 22){ // <
                writer.writeParse("2"); 
                equipara(22); // <
                String tipoR = R();
                String tipoE2 = E2();
                if(tipoR.equals(ent) && (tipoE2.equals(logico) || tipoE2.equals(vacio))){
                    return logico;
                }else{
                    return error;
                }
            }else if(id == 13 || id == 16 || id == 17 ){ // ) ; ,
                writer.writeParse("3");
                return vacio;
            }else{
                GenError(7, tokensStrings[22] + "' | '" + tokensStrings[13] + "' | '" + tokensStrings[16] + "' | '" + tokensStrings[17]);
                return error;
            }
        }
        return ok;
    }

    private static String R(){
        writer.writeParse("4");
        String tipoU = U();
        String tipoR2 = R2();    
        if(tipoR2.equals(ent) && tipoU.equals(ent)){
            return ent;
        }else{
            return tipoU;
        }
    }

    private static String R2(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 20){ // *
                writer.writeParse("5");
                equipara(20); // *
                String tipoU = U();
                String tipoR2 = R2();
                if(tipoU.equals(ent) && (tipoR2.equals(ent) || tipoR2.equals(vacio))){
                    return ent;
                }else{
                    return error;
                }
            }else if(id == 22 || id == 13 || id == 16 || id == 17){ // < ) ; ,
                writer.writeParse("6");
                return vacio;
            }else{
                GenError(7, tokensStrings[20] + "'| '" + tokensStrings[22] + "' | '" + tokensStrings[13] + "' | '" + tokensStrings[16] + "' | '" + tokensStrings[17]);
                return error;
            }            
        }
        return ok;  
    }

    private static String U(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 21){ // !
                writer.writeParse("7");
                equipara(21); // !
                String tipoV = V();
                if(tipoV.equals(logico)){
                    return logico;
                }
            }else if(id == 25 || id == 12 || id == 24 || id == 23){ // id ( ent cad
                writer.writeParse("8");
                String tipoV = V();
                return tipoV;
            }else{
                GenError(7, tokensStrings[21] + "' | '" + tokensStrings[25] + "' | '" + tokensStrings[12] + "' | '" + tokensStrings[24] + "' | '" + tokensStrings[23]);
                return error;
            }
        }
        return ok;
    }

    private static String V(){
        int pos;
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 25){ // id
                writer.writeParse("9");
                equipara(25); // id
                String tipoV2 = V2();
                pos = buscoIdTS(cad);
                if(pos == -1){
                    List<Object> lista = new ArrayList<Object>();
                    insertartipoTSG(pos,ent);
                    insertarDesplazaTSG(pos,posicionGlobal);
                    posicionGlobal++;
                }
                String tipoId = buscaTipoTS(pos);
                if(tipoId.equals(fun)){
                    if(tipoV2.equals(vacio)){
                        return error;
                    }
                    String tipoParam = buscaTipoParametro(pos);
                    int numeroParam = buscaNumParametros(pos);
                    String tipo = buscaTipoTSG(pos);
                    if(numParametros== nunmeroParam && tipoParametro.equals(tipoParam)){
                        return tipo;
                    }
                    return tipoId;
                }
            }else if(id == 12){ // ( 
                writer.writeParse("10");
                equipara(12); // (
                String tipoE = E();
                equipara(13); // )
                return tipoE;
            }else if(id == 24){ // ent**********
                writer.writeParse("11");
                equipara(24); // ent
            }else if(id == 23){ // cad
                writer.writeParse("12");
                equipara(23); // cad
            }else{
                GenError(7, tokensStrings[25] + "' | '" + tokensStrings[12] + "' | '" + tokensStrings[24] + "' | '" + tokensStrings[23]);
                return error;
            }
        }
        return ok;
    }
    
    private static String V2(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 12){ // (
                writer.writeParse("13");
                equipara(12); // (
                L();
                equipara(13); // )
               ****************** tipoParametro = tipoParametro;
                numParametros = numParametros;
            }else if(id == 20 || id == 22 || id == 13 || id == 16 || id == 17){ // * < ) ; ,
                writer.writeParse("14");
                tipoParametro = vacio;
                numParametros = 0;
            }else{
                GenError(7, tokensStrings[12] + "' | '" + tokensStrings[20] + "' | '" + tokensStrings[22] + "' | '" + tokensStrings[13] + "' | '" + tokensStrings[16] + "' | '" + tokensStrings[17]);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static String S(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 25){ // id
                writer.writeParse("15");
                int pos = (int)sigToken.getValue();
                int existe = buscoIdTS(cad);
                equipara(25); // id
                if(existe == -1){
                    ArrayList<Object> atribs = new ArrayList<Object>(); 
                    atribs.add(cad); // Lexema
                    atribs.add(ent); //  Tipo
                    atribs.add(desplGlobal); // Desplazamiento
                    desplGlobal++;
                    atribs.add(""); //  Num param
                    atribs.add(new ArrayList<Object>()); //  lista param
                    atribs.add(""); //  tipo retorno
                    atribs.add(""); // etiqueta
                    tablaSimGlobal.add(atribs);
                    pos = tablaSimGlobal.size() - 1;
                    mapaTSG.put(cad, pos);
                }
                String tipo;
                if(mapaTSG.containsKey(cad)){
                    tipo = (String)((ArrayList<Object>)tablaSimGlobal.get(pos)).get(1);
                }else{
                    tipo = (String)((ArrayList<Object>)tablaSimLocal.get(pos)).get(1);
                }
                String [] tipoN = S2();
                if(tipoN.length == 1){
                    return error;
                }else if(tipo.equals(fun)){
                    String numeroParam;
                    ArrayList<String> tipoParam;
                    if(mapaTSG.containsKey(cad)){
                        numeroParam = (String)((ArrayList<Object>)tablaSimGlobal.get(pos)).get(3);
                        tipoParam = (ArrayList<String>)((ArrayList<Object>)tablaSimGlobal.get(pos)).get(4);
                    }else{
                        numeroParam = (String)((ArrayList<Object>)tablaSimLocal.get(pos)).get(3);
                        tipoParam = (ArrayList<String>)((ArrayList<Object>)tablaSimLocal.get(pos)).get(4);
                    }
                    boolean coincidenParam = tipoN[2].equals(numeroParam);      // Se reciben el mismo numero de param que se requieren 
                    for(int i = 3; i < tipoN.length && coincidenParam; i++){
                        coincidenParam = tipoN[i].equals(tipoParam.get(i-3));   // Los tipos son correctos incluido el orden
                    }
                    if(coincidenParam){
                        return ok;
                    }else{
                        GenError(11, "");
                        return error;
                    }        
                }else if(tipoN[0].equals(tipo)){
                    return ok;
                }
            }else if(id == 10){ // print
                writer.writeParse("16");
                equipara(10); // print
                String tipoE = E();
                equipara(16); // ;
                if(tipoE.equals(cad) || tipoE.equals(ent)){
                    return ok;
                }else{
                    GenError(12, "");
                    return error;
                }
            }else if(id == 11){ // input
                writer.writeParse("17");
                equipara(11); // input
                int pos = (int)sigToken.getValue();
                int existe = buscoIdTS(cad);
                equipara(25); // id
                if(existe == -1){
                    ArrayList<Object> atribs = new ArrayList<Object>(); 
                    atribs.add(cad); // Lexema
                    atribs.add(ent); //  Tipo
                    atribs.add(desplGlobal); // Desplazamiento
                    desplGlobal++;
                    atribs.add(""); //  Num param
                    atribs.add(new ArrayList<Object>()); //  lista param
                    atribs.add(""); //  tipo retorno
                    atribs.add(""); // etiqueta
                    tablaSimGlobal.add(atribs);
                    pos = tablaSimGlobal.size() - 1;
                    mapaTSG.put(cad, pos);
                }
                String tipo;
                if(mapaTSG.containsKey(cad)){
                    tipo = (String)((ArrayList<Object>)tablaSimGlobal.get(pos)).get(1);
                }else{
                    tipo = (String)((ArrayList<Object>)tablaSimLocal.get(pos)).get(1);
                }
                equipara(16); // ;
                if(tipo.equals(cad) || tipo.equals(ent)){
                    return ok;
                }else{
                    GenError(12, "");
                    return error;
                }
            }else if(id == 9){ // return
                writer.writeParse("18");
                equipara(9); // return
                String tipoX = X();
                equipara(16); // ;
                if(!tablaG){
                    String tipoRetorno = (String)((ArrayList<Object>)tablaSimGlobal.get(funcionAct)).get(5);
                    String tipos;
                    if(tipoRetorno.equals(tipoX)){
                        tipos = ok + " " + tipoRetorno;
                    }else{
                        tipos = error + " " + error;
                    }
                    return tipos;
                }else{
                    return error + " " + error;
                }
            }else{
                GenError(7, tokensStrings[25] + "' | '" + tokensStrings[10] + "' | '" + tokensStrings[11] + "' | '" + tokensStrings[9]);
                return error;
            }
        }
        return ok;
    }
    
    private static String S2(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 18){ // =
                writer.writeParse("19");
                equipara(18); // =
                String tipoE = E();
                equipara(16); // ;
                return tipoE;
            }else if(id == 12){ // (
                writer.writeParse("20");
                equipara(12); // (
                L();
                equipara(13); // )
                equipara(16); // ;
                //num
                //tipo
                return fun;
                
            }else if(id == 19){ // +=
                writer.writeParse("21");
                equipara(19); // +=
                String tipoE = E();
                equipara(16); // ;
                return tipoE;
            }else{
                GenError(7, tokensStrings[18] + "' | '" + tokensStrings[12] + "' | '" + tokensStrings[19]);
                return error;
            }
        }
        return ok;
    }

    private static String L(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 21 || id == 25 || id == 12 || id == 24 || id == 23){ // ! id ( ent cad
                writer.writeParse("22");
                E();
              String tipoQ = Q();
              if(tipoQ.equals(vacio)){
                    ///
              }
              else{

              }
            }
            else if(id == 13){ // )
                writer.writeParse("23");
                return vacio;
            }
            else{
                GenError(7, tokensStrings[12]+"' | '"+tokensStrings[13]+"' | '" + tokensStrings[21]+"' | '"+tokensStrings[23]+"' | '"+ tokensStrings[24]+"' | '"+tokensStrings[25]);
                return error;
            }
        }
        return ok;
    }
    
    private static String Q(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 17){ //Coma
                writer.writeParse("24");
                equipara(17); // Coma
                E();
                String tipoQ = Q();
                if(tipoQ.equals(vacio)){

                }
                else{

                }
            }else if(id == 13){ // )
                writer.writeParse("25");
                return vacio;
            }else{
                GenError(7, tokensStrings[17]+"' | '"+tokensStrings[13]);
                return error;
            }
        } 
        return ok;
    }

    private static String X(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 21 || id == 25 || id == 12 || id == 23 || id == 24){ /// ! id ( ent cad
                writer.writeParse("26"); 
                String tipoE = E();
                return tipoE;
            }
            else if(id == 16){ //Punto y coma
                writer.writeParse("27");
                return vacio;
            }
            else{
                GenError(0, tokensStrings[21]+"' | '"+tokensStrings[25]+"' | '" + tokensStrings[12]+"' | '"+tokensStrings[23]+"' | '"+ tokensStrings[24]+"' | '"+tokensStrings[16]);
                return error;
            }
        }
        return ok;
    }

    private static String B(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 5){ // if
                writer.writeParse("28");
                equipara(5); // if
                equipara(12); // parIzzq
                String tipoE = E();
                if(!tipoE.equals(logico)){
                    GenError(10, "");
                    equipara(13); // parDer
                    S();
                    return error;
                }else{
                    equipara(13); // parDer
                    String tipoS = S();
                    return tipoS.split(" ")[0];
                }     
            }else if(id == 1){ // let
                writer.writeParse("29");
                zonaDeclaracion = true;
                equipara(1);  // let
                int pos = (int)sigToken.getValue(); // posicion en tabla de simbolos
                equipara(25); // id
                zonaDeclaracion = false;
                String[] tipoT = T().split(" ");
                equipara(16); // punto y coma
                if(tablaG){
                    insertarTipoTS(pos, tipoT[0], tablaSimGlobal);
                    insertarDespTS(pos, desplGlobal, tablaSimGlobal);
                    desplGlobal = desplGlobal + Integer.parseInt(tipoT[1]);
                }else{
                    insertarTipoTS(pos, tipoT[0], tablaSimLocal);
                    insertarDespTS(pos, desplLocal, tablaSimLocal);
                    desplLocal = desplLocal + Integer.parseInt(tipoT[1]);
                }
                return ok;
            }else if(id == 25 || id == 9 || id == 10 || id == 11){ // id print input return 
                writer.writeParse("30");
                //equipara(3); // string
                String tipoS = S();
                return tipoS;
            }else if(id == 6){// do
                writer.writeParse("31");
                equipara(6); // do
                equipara(14); // llaveizq
                if(sigToken != null){
                    //System.out.println(sigToken);
                    id = sigToken.getID();
                    //System.out.println("entro");
                    String tipoC = C();
                    equipara(15); // llaveDer
                    equipara(7);  // while
                    equipara(12); // parIzq
                    String tipoE = E();
                    if(!tipoE.equals(logico)){
                        equipara(13); // parDer
                        equipara(16); // ;
                        GenError(10, "");
                        return error;
                    }
                    equipara(13); // parDer
                    equipara(16); 
                    return tipoC;
                }
            }else{
                GenError(7, tokensStrings[5]+"' | '"+tokensStrings[1]+"' | '" + tokensStrings[25]+"' | '"+tokensStrings[9]+"' | '"+ tokensStrings[10]+"' | '"+tokensStrings[11]+"' | '"+tokensStrings[6]);
                return error;
            }
        }
        return ok;
    }

    private static String T(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 2){ // int 
                writer.writeParse("32");
                equipara(2); // int
                String tipos = ent + " 1";
                return tipos;
            }
            else if(id == 4){ // boolean
                writer.writeParse("33");
                equipara(4);  // boolean
                String tipos = logico + " 1";
                return tipos;
            }
            else if(id == 3){ // string
                writer.writeParse("34");
                equipara(3); // string
                String tipos = cad + " 64";
                return tipos;
            }
            else{
                GenError(7, tokensStrings[2]+"' | '"+tokensStrings[4]+"' | '" + tokensStrings[3]);
                String tipos = error + " 0";
                return tipos;
             }
        }
        return ok;
    }

    private static void F(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 8){ // function
                writer.writeParse("35");
                equipara(8); // function
                equipara(25); // id
                H();
                equipara(12); // (
                A();
                equipara(13); // )
                equipara(14); // {
                if(sigToken != null){
                    //System.out.println(sigToken);
                    id = sigToken.getID();
                    //System.out.println(id);
                    while(id == 5 || id == 1 || id == 6 || id == 25 || id == 10 || id == 11 || id == 9){ // if let do id print input return
                        //System.out.println("entro");
                        C();
                        if(sigToken == null){
                            break;
                        }
                        id = sigToken.getID();
                    }
                    equipara(15); // }
                }
            }else{
                GenError(7, tokensStrings[8]+"' | '"+tokensStrings[5]+"' | '" + tokensStrings[1]+"' | '"+tokensStrings[66]+"' | '"+ tokensStrings[10]+"' | '"+tokensStrings[25]+"' | '"+tokensStrings[11]+"' | '"+tokensStrings[9]);
            }
        }
    }

    private static String H(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 2 || id == 3 || id == 4){// int boolean string
                writer.writeParse("36");
                String tipoT = T();
                return tipoT;
            }else if(id == 12){ // parIzq
                writer.writeParse("37");
                return vacio;
            }else{
                GenError(7,tokensStrings[2]+"' | '"+tokensStrings[3]+"' | '" + tokensStrings[4]+"' | '"+tokensStrings[12]);
                return error;
            }
        }
        return ok;
    }

    private static String A(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 2 || id == 3 || id == 4){ // int boolean string
                writer.writeParse("38");
                String tipoT = T();
                equipara(25); // id
                String tipoK = K();
                int pos;
                pos = mapaTSL.get(id);
                insertarTipoTSL(pos,tipoT);
                insertarDesplazTSL(pos,posicionLocal);
                posicionLocal++;
                if(tipoK.equals(vacio)){
                    return tipoT;
                    ///num param 1
                }
                else{
                    ///////////////
                }
            }
            else if(id == 13){ // parDer
                writer.writeParse("39");
                return vacio;
            }   
            else{
                GenError(7, tokensStrings[2]+"' | '"+tokensStrings[3]+"' | '" + tokensStrings[4]+"' | '"+tokensStrings[13]);
                return error;
            }
        }
        return ok;
    }

    private static String K(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 17){ // coma
                writer.writeParse("40");
                equipara(17); // coma
                T();
                equipara(25); // id
                String tipoK = K();
                pos = mapaTSL.get(id);
                insertarTipoTSL(pos,tipoT);
                inserdesplazTSL(pos,posicionLocal);
                if(tipoK.equals(vacio)){

                }
                else{

                }
            }
            else if(id == 13){ // parDer
                writer.writeParse("41");
                return vacio;
            }   
            else{
                GenError(7, tokensStrings[17]+"' | '"+tokensStrings[13]);
                return error;
            }
        }
        return ok;
    }

    private static String C(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 5 || id == 1 || id == 6 || id == 25 || id == 10 || id == 11 || id == 9){ // if let do id print input  return
                writer.writeParse("42");
                String tipoB = B();
                if(tipoB.equals(error)){
                    C();
                    return error;
                }
                String tipoC = C();
                if(tipoC.equals(vacio)){
                    return ok;
                }else{
                    return tipoC;
                }
            }
            else if(id == 15){ // llaveDer
                writer.writeParse("43");
                return vacio;
            }   
            else{
                GenError(7, tokensStrings[5] + "' | '" + tokensStrings[1] + "' | '" + tokensStrings[6] + "' | '" + tokensStrings[25] + "' | '" + tokensStrings[10] + "' | '" + tokensStrings[11] + "' | '" + tokensStrings[9] + "' | '" + tokensStrings[15]);
                return error;
            }
        }
        return ok;
    }
    
    private static String P(){
        if(sigToken != null){
            int id = sigToken.getID();
            if(id == 5 || id == 1 || id == 6 || id == 25 || id == 10 || id == 11 || id == 9){ // if let do id print input return
                writer.writeParse("44");
                String tipoB = B();
                String tipoP = P();
                if(tipoB.equals(vacio)){
                    return tipoP;
                }
                if(tipoB.equals(vacio) || tipoP.equals(error)){
                    return error;
                }
            }else if(id == 8){ // function
                writer.writeParse("45");
                String tipoF = F();
                String tipoP = P();
                if(tipoF.equals(vacio)){
                    return tipoP;
                }
                if(tipoF.equals(vacio) || tipoP.equals(error)){
                    return error;
                }
            }else if( id == 65535){ // EOF $
                writer.writeParse("46");
                return vacio;
                
            }else{
                GenError(7, tokensStrings[5] + "' | '" + tokensStrings[1] + "' | '" + tokensStrings[6] + "' | '" + tokensStrings[25] + "' | '" + tokensStrings[10] + "' | '" + tokensStrings[11] + "' | '" + tokensStrings[9] + "' | '" + tokensStrings[8] + "' | $ (EOF)" );
            }
        }
        return ok;
    }

//  AUXILIAR FUNCTIONS

    private static int buscoIdTS(String id){
        int pos = -1;
        if(tablaG){
             if(mapaTSG.containsKey(id)){
                pos = mapaTSG.get(id);
            }
        }
        else{ 
             if(mapaTSL.containsKey(id) || mapaTSG.containsKey(id)){
                 pos = mapaTSL.get(id);
            }
        }
        return pos;
    }

    @SuppressWarnings("unchecked")
    private static void insertarTipoTS(int pos, String tipo,  List<Object> lista){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)lista.get(pos);
        listaAtributos.set(1,tipo);
        lista.set(pos, listaAtributos);
    }

    @SuppressWarnings("unchecked")
    private static void insertarDespTS(int pos, int desp,  List<Object> lista){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)lista.get(pos);
        listaAtributos.set(2,desp);
        lista.set(pos, listaAtributos);
    }
    
    @SuppressWarnings("unchecked")
    private static void insertarNumParamTS(int pos, int param){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)tablaSimGlobal.get(pos);
        listaAtributos.set(3,param);
        tablaSimGlobal.set(pos, listaAtributos);
    }

    @SuppressWarnings("unchecked")
    private static void insertarTipoParamTS(int pos,  List<String> lista){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)tablaSimGlobal.get(pos);
        ArrayList<Object> listaParametros = (ArrayList<Object>)listaAtributos.get(4);
        for(int i = 2; i<lista.size();i++){
            listaParametros.add(lista.get(i));
        }
        listaAtributos.set(4,listaParametros);
        tablaSimGlobal.set(pos,listaAtributos);
    }

    @SuppressWarnings("unchecked")
    private static void insertarTipoRetTS(int pos, String ret){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)tablaSimGlobal.get(pos);
        listaAtributos.set(5, ret);
        tablaSimGlobal.set(pos, listaAtributos);
    }

    @SuppressWarnings("unchecked")
    private static void insertarEtiquetaTS(int pos, String etiqueta){
        ArrayList<Object> listaAtributos = (ArrayList<Object>)tablaSimGlobal.get(pos);
        listaAtributos.set(6, etiqueta);
        tablaSimGlobal.set(pos, listaAtributos);
    }

    private static String nuevaEtiquetaTS(){
        String nombre = "EtFun";
        nombre = nombre + contadorFunciones;
        return nombre;
    }
    
    private static Token GenToken(Integer id, Object value, String comment){
        Token token = new Token(id, value);
        writer.writeToken(token.toString() + "  // token " + comment + "\n");
        //System.out.println(token.toString() + "// token " + comment + "\n");
        return token;
    }

    private static void GenError (int error, String data){
        int numero;
        if(data.equals("id")){
            data="identicador (nombre de una variable o funciÃ³n)";
        }else if(data.equals("ent")){
            data = "constante entera";
        }else if(data.equals("cad")){
            data = "cadena de caracteres";
        }
        if(sigToken.getID()==65535){
            numero=0;
        }
        else{
            numero=sigToken.getID();
        }
        switch(error){
            case 1: 
                writer.writeError("Error lÃ©xico (1): LÃ­nea " + line + ": Se ha producido un error en la generaciÃ³n del token. No se esperaba el carÃ¡cter '" + data + "'\n");
                errorState = true;
                break;
            case 2:
                writer.writeError("Error lÃ©xico (2): LÃ­nea " + line + ": Se ha superado el nÃºmero mÃ¡ximo de caracteres: 64. NÃºmero actual de caracteres: " + data + "\n");
                errorState = true;
                break;
            case 3:
                writer.writeError("Error lÃ©xico (3): LÃ­nea " + line + ": Entero fuera de rango. El nÃºmero no debe ser superior a 32767.\n");
                errorState = true;
                break;
            case 4:
                writer.writeError("Error lÃ©xico (4): LÃ­nea " + line + ": No se esperaba el carÃ¡cter '/'. En caso de querer escribir un comentario, solo se admite el siguiente formato: // Comentario\n");
                errorState = true;
                break;
            case 5:
                writer.writeError("Error SemÃ¡ntico (5): LÃ­nea " + line + ": Ya existe el identificador " + data + ". Elija otro nombre.\n");
                errorState = true;
                break;
            case 6:
                writer.writeError("Error sintÃ¡ctico (6): LÃ­nea " + line + ": Se ha encontrado '" + tokensStrings[numero] + "' y se esperaba '" + data + "'\n");
                errorState = true;
                break;
            case 7:
                writer.writeError("Error sintÃ¡ctico (7): LÃ­nea " + line + ": Se ha encontrado '" + tokensStrings[numero] + "' y se esperaba uno de estos tokens: '" + data + "'\n");
                errorState = true;
                break;
            case 8:
                writer.writeError("Error sintÃ¡ctico (8): LÃ­nea " + line + ": Se ha encontrado '" + tokensStrings[numero] + "' y se esperaba el fin de fichero.\n");
                errorState = true;
                break;
            case 9:
                writer.writeError("Error semÃ¡ntico (9): LÃ­nea " + line + ": El identificador '" + data + "' no estÃ¡ declarado.\n");
                errorState = true;
                break;
            case 10:
                writer.writeError("Error semÃ¡ntico (10): LÃ­nea " + line + ": La expresiÃ³n debe ser de tipo lÃ³gico.\n");
                errorState = true;
                break;
            case 11:
                writer.writeError("Error semÃ¡ntico (11): LÃ­nea " + line + ": Deben coincidir tanto el nÃºmero de parÃ¡metros dados como su tipo.\n");
                errorState = true;
                break;
            case 12:
                writer.writeError("Error semÃ¡ntico (12): LÃ­nea " + line + ": La expresiÃ³n debe ser de tipo cadena o de tipo entero.\n");
                errorState = true;
                break;
        }
    }

    private static void GenTS(){
        writer.writeTS("CONTENIDO DE LA TABLA DE SIMBOLOS #1 :\n");
        writer.writeTS("\n");
        for(int i = 0; i < symbolsTable.size(); i++){
            writer.writeTS("* LEXEMA : '" + symbolsTable.get(i) + "'\n");
            writer.writeTS("-----------------------------------------\n");
        }
    }

    private static void destroyTS(){
        symbolsTable.clear();
    }

    private static void fillKeywords(){
        String [] arrayKw = {null, "let", "int", "string", "boolean", "if", "do", "while", "function", "return", "print", "input"};
        keywords = Arrays.asList(arrayKw);
    }

    private static int searchKeyword(String token){
        return keywords.indexOf(token);
    }

    public static void main(String[] args) { // args contains the arguments
        if(args.length != 1){
            System.err.println("Uso: java JavaScript.java <input.txt>");
            System.exit(FAILURE);
        }

        afd = new AFD();
        symbolsTable = new ArrayList<>();
        reader = new Reader(args[0]);
        c = reader.read();
        writer = new Writer("tokens.txt", "ts.txt", "errors.txt", "parse.txt");
        fillKeywords();
        //while((t = LexicAnalizer()) != null && t.getID() != EOF );
        SyntaticAnalizer();
       // System.out.println(mapaTSG.toString());
        //System.out.println(mapaTSL.toString());

        GenTS();
        destroyTS();
        reader.close();
        writer.close();
        if(errorState){
            System.out.println("Se han producido errores. Consulte el fichero 'errors.txt' para encontrar los detalles.");
        }else{
            System.out.println("Todo bien jiji");
        }
        System.exit(SUCCED);
    }
}